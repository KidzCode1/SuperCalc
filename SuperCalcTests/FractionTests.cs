using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using SuperCalcCore;

namespace SuperCalcTests
{
	[TestClass]
	public class FractionTests
	{
		SuperNumber oneSixth = new SuperNumber(0, 1, 6);
		SuperNumber twoTwelths = new SuperNumber(0, 2, 12);
		SuperNumber negOneTwoThirds = new SuperNumber(-1, 2, 3) /* <formula 3; -1 \frac{2}{3}>  */;

		SuperNumber negOneHalf = new SuperNumber(0, -1, 2) /* <formula 3; \frac{-1}{2}>  */;

		SuperNumber zero = new SuperNumber(0, 0, 0);
		SuperNumber one = new SuperNumber(1, 0, 0);
		SuperNumber negativeOne = new SuperNumber(-1, 0, 0);
		SuperNumber oneHalf = new SuperNumber(0, 1, 2);


		[TestMethod]
		public void TestFractionToDecimalConversion()
		{
			SuperNumber superNumber = new SuperNumber("1 1/2");
			Assert.AreEqual(1.5m, superNumber);

			SuperNumber superNumber2 = new SuperNumber("5 3/4");
			Assert.AreEqual(5.75m, superNumber2);

			SuperNumber superNumber3 = new SuperNumber("1/3");
			Assert.AreEqual(0.3333333333333333333333333333m, superNumber3);
		}

		// 0.3333333333333333333333333333m
		// 0.6666666666666666666666666666m
		// 0.9999999999999999999999999999m => 1

		[TestMethod]
		public void TestToNumFromOne()
		{
			Assert.AreEqual(1m, "1".ToNum());
		}

		[TestMethod]
		public void SimplificationTests()
		{
			Assert.AreEqual("1/3", "3/9".ToNum());
			Assert.AreEqual("-1/3", "-3/9".ToNum());
		}

		[TestMethod]
		public void TestDecimalToFractionConversion()
		{
			Assert.AreEqual("1/2", "0.5".ToNum().ConvertToFraction());
			Assert.AreEqual("1/4", "0.25".ToNum().ConvertToFraction());
			Assert.AreEqual("1/8", "0.125".ToNum().ConvertToFraction());
			Assert.AreEqual("1/16", "0.0625".ToNum().ConvertToFraction());
		}

		[TestMethod]
		public void TestFourNums()
		{
			Assert.IsTrue("1 1/2 + 3 1/2 = 15 / 3".Eval());
		}
		[TestMethod]
		public void TestFourNums2()
		{
			Assert.IsTrue("88/44 * 9/3 = 18 / 3".Eval());
		}
		[TestMethod]
		public void TestFourNums3()
		{
			Assert.IsTrue("100/10 * 90/45 = 50 - 30".Eval());
		}
		[TestMethod]
		public void TestFourNums4()
		{
			Assert.IsTrue("-18/6 * -90/30 = -69 + 78".Eval());
		}

		[TestMethod]
		public void TestFourNums5()
		{
			Assert.IsTrue("1/3 * 1/3 = 1/9".Eval());
		}

		[TestMethod]
		public void TestDisplayStr()
		{
			Assert.AreEqual("2 1/2", "1 1/2 + 1".ToNum());
		}

		[TestMethod]
		public void TestThreeNums1()
		{
			Assert.IsTrue("1 1/2 + 1 = 2 1/2".Eval());
		}

		[TestMethod]
		public void AutoGeneratedTests()
		{
			Assert.AreEqual("5 2/5", "3/5 / 1/9".ToNum());
			Assert.AreEqual("25/72", "5/9 / 8/5".ToNum());
			Assert.AreEqual("7/72", "1/9 / 8/7".ToNum());
			Assert.AreEqual("9/16", "3/2 / 8/3".ToNum());
			Assert.AreEqual("1 11/21", "4/3 / 7/8".ToNum());
		}

		[TestMethod]
		public void TestFractionalConversion()
		{
			Assert.AreEqual("1/2", "0.5".ToNum().ImproperFractionStr);
			Assert.AreEqual("1/4", "0.25".ToNum().ImproperFractionStr);
			Assert.AreEqual("1 1/4", "1.25".ToNum().MixedNumberFractionStr);
			Assert.AreEqual("5/4", "1.25".ToNum().ImproperFractionStr);
		}

		[TestMethod]
		public void TestDivideNeg()
		{
			Assert.AreEqual("25/33", "1 2/3 / 2 1/5".ToNum());
			Assert.AreEqual("-25/33", "-1 2/3 / 2 1/5".ToNum());
			Assert.AreEqual("-25/33", "1 2/3 / -2 1/5".ToNum());
			Assert.AreEqual("25/33", "-1 2/3 / -2 1/5".ToNum());
		}

		[TestMethod]
		public void TestFractionalAdd()
		{
			const decimal oneThird = 0.3333333333333333333333333333m;
			Assert.AreEqual(1m, "1/3 + 2/3".ToNum());

			

			Assert.AreEqual(100.5m, new SuperNumber("400/4") + new SuperNumber("7/14"));

			Assert.AreEqual(-oneThird, new SuperNumber("1/3") + new SuperNumber("-2/3"));

			Assert.AreEqual(100.5m, "400/4 + 7/14".ToNum());

			Assert.AreEqual(50.5m, "300/6 + 7/14".ToNum());

			Assert.IsTrue("1/3 + 2/3 = 1".Eval());



			SuperNumber result = oneSixth + twoTwelths; //` <formula 3; \frac{1}{6} + \frac{2}{12}>
			// Test that it simplifies after the add:
			Assert.AreEqual(1, result.Numerator);
			Assert.AreEqual(3, result.Denominator);
			Assert.AreEqual(0, result.WholeNumber);
		}

		[TestMethod]
		public void MatchesZero()
		{
			Assert.AreEqual(zero, new SuperNumber(0, 0, 36));
			Assert.AreEqual(zero, new SuperNumber(0, 0, 0));
			Assert.AreEqual(0, (decimal)new SuperNumber(0, 0, 1));
			Assert.AreEqual(0, (decimal)new SuperNumber(0, 0, 0));
		}

		[TestMethod]
		public void TestMultiplication()
		{
			Assert.AreEqual(new SuperNumber(0, 1, 36) /* <formula 3; \frac{1}{36}>  */, oneSixth * twoTwelths);
			Assert.AreEqual(zero, twoTwelths * zero);
			Assert.AreEqual(new SuperNumber(0, 5, 6).Value /* <formula 3; \frac{5}{6}>  */, (negOneTwoThirds * negOneHalf).Value);

		}

		[TestMethod]
		public void TestDivide()
		{
			Assert.AreEqual(0.6m, 1 / new SuperNumber(1, 2, 3));
		}

		[TestMethod]
		public void TestInvert()
		{
			SuperNumber thirtySix = new SuperNumber(0, 36, 1);
			Assert.AreEqual(new SuperNumber(0, 1, 36) /* <formula 3; \frac{1}{36}>  */, thirtySix.CreateReciprocal());
		}

		[TestMethod]
		public void TestSign()
		{
			Assert.AreEqual(-1, negOneTwoThirds.Sign);
			Assert.AreEqual(-1, negOneHalf.Sign);

			Assert.AreEqual(0, zero.Sign);

			Assert.AreEqual(1, one.Sign);

			Assert.AreEqual(-1, negativeOne.Sign);

			Assert.AreEqual(1, oneHalf.Sign);
		}

		[TestMethod]
		public void CheckValueConversion()
		{
			SuperNumber supNum = new SuperNumber(-1, 1, 2) /* <formula 3; -1 \frac{1}{2}>  */;
			Assert.AreEqual(-1.5m, supNum);
		}

		[TestMethod]
		public void TestFractionalAddImproper()
		{
			SuperNumber superNumber1 = new SuperNumber(0, 4, 3);
			SuperNumber superNumber2 = new SuperNumber(0, 2, 6);
			SuperNumber superNumber3 = superNumber1 +  superNumber2;
			Assert.AreEqual(new SuperNumber(1, 2, 3), superNumber3);
		}

		[TestMethod]
		public void TestFractionalSubtractImproper()
		{
			SuperNumber superNumber1 = new SuperNumber(0, 4, 3);
			SuperNumber superNumber2 = new SuperNumber(0, 2, 6);
			SuperNumber superNumber3 = superNumber1 - superNumber2;
			Assert.AreEqual(1, (decimal)superNumber3);
		}

		[TestMethod]
		public void TestNegativeSubtraction()
		{
			SuperNumber superNumber1 = new SuperNumber(0, 1, 3);
			SuperNumber superNumber2 = new SuperNumber(1, 0, 1);
			SuperNumber superNumber3 = superNumber1 - superNumber2;
			Assert.AreEqual(new SuperNumber(0, -2, 3), superNumber3);
		}

		[TestMethod]
		public void TestEquivalentFractions()
		{
			SuperNumber superNumber1 = new SuperNumber(0, 2, 3);
			SuperNumber superNumber2 = new SuperNumber(0, 4, 6);
			Assert.IsTrue(superNumber1.AreFractionsEquivalent(superNumber2));
		}

		[TestMethod]
		public void TestMakeProperFraction()
		{
			SuperNumber superNumber = new SuperNumber(0, 4, 6);
			Assert.AreEqual(new SuperNumber(0, 4, 6), superNumber);
			superNumber.MakeFractionProper();
			Assert.AreEqual(new SuperNumber(0, 2, 3), superNumber);
		}

		[TestMethod]
		public void TestMakeNegative()
		{
			SuperNumber superNumber = new SuperNumber(0, 4, 6);
			SuperNumber negSuperNumber = superNumber.CreateNegative();
			Assert.AreEqual(new SuperNumber(0, -4, 6), negSuperNumber);
		}



		[TestMethod]
		public void TestMakeProperFraction2()
		{
			SuperNumber superNumber = new SuperNumber(0, 8, 12);
			superNumber.MakeFractionProper();
			Assert.AreEqual(new SuperNumber(0, 2, 3), superNumber);
		}

		[TestMethod]
		public void  TestMakeProperFraction3()
		{
			SuperNumber superNumber = new SuperNumber(0, 4, 3);
			superNumber.MakeFractionProper();
			Assert.AreEqual(new SuperNumber(1, 1, 3), superNumber);
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentException))]
		public void BadData()
		{
			SuperNumber badNegOneTwoThirds = new SuperNumber(1, -2, 3) /* <formula 3; 1 \frac{-2}{3}>  */;

		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentException))]
		public void DivZero()
		{
			SuperNumber badDivZero = new SuperNumber(1, 1, 0);
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentException))]
		public void DivZero2()
		{
			SuperNumber badDivZero = new SuperNumber("1 1/0");
		}
	}
}


